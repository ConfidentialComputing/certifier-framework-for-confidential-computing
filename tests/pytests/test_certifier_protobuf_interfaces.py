# #####################################################################################
# Copyright (c) 2021-23, VMware Inc, and the Certifier Authors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ##############################################################################
"""
Basic pytests for Certifier Framework protobuf interfaces generated by
 $ protoc --python_out=.. ... ../certifier_service/certprotos/certifier.proto

See certifier.mak for the command issued.
"""
from inspect import getmembers, isclass, ismodule

# To resolve references to module and protobuf-python interfacee issues, run as:
# PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python PYTHONPATH=../.. pytest <filename>.py
import certifier_pb2 as cert_pbi


# ##############################################################################
# To see output, run: pytest --capture=tee-sys -v
def test_certifier_pb2_basic():
    """ Basic test of generated certifier_pb2.py module."""

    assert ismodule(cert_pbi) is True

    pb2_classes = getmembers(cert_pbi, isclass)

    print( )
    # get_attrs(cert_pbi.key_message)

    for attr in get_attrs1(cert_pbi.key_message):
        print(' -', attr)

    # print(get_attrs(cert_pbi.key_message))

    # pr_attrs(cert_pbi.key_message)
    # print(getmembers(cert_pbi.key_message, isclass))

    print( )
    # for class_name in pb2_classes:
    #     print(' ', class_name)

def get_attrs0(klass):
    return [(k , klass.__dict__[k]) for k in klass.__dict__.keys()
            if not k.startswith('__') and not k.endswith('__')
               # and '_FieldProperty' in klass.__dict__[k]
          ]

def get_attrs1(klass):
    return [k for k in klass.__dict__.keys()
            if not k.startswith('__') and not k.endswith('__')
               and k != 'DESCRIPTOR'
               and "_FieldProperty" in str(klass.__dict__[k])
          ]

def get_attrs(klass):
    result = []
    for k in klass.__dict__.keys():
        if k.startswith('__') or k.endswith('__'):
            continue
        # print(klass.__dict__.items)
        if "_FieldProperty" not in str(klass.__dict__[k]):
            continue
        print(k)
        print((klass.__dict__)[k])
        result += k

    return result

def pr_attrs(klass):
    # print([(k, test_dict[k]) for k in test_dict])
    print([(k, klass.__dict__[k]) for k in klass.__dict__.keys() if not k.startswith('__') and not k.endswith('__')])
