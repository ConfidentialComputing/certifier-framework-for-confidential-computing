// REMOVE THIS AFTER OPEN SOURCE APPROVAL: The license notices below are ineffective
// until these two lines are removed.

// DELETE THIS FILE eventually

//  Copyright (c) 2021-22, VMware Inc, and the Certifier Authors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// File: simpleserver.go

package main

import (
        "crypto/x509"
        "crypto/rsa"
        "flag"
        "fmt"
        "encoding/hex"
        "net"
        "os"
        "time"

        "github.com/golang/protobuf/proto"
        certprotos "github.com/jlmucb/crypto/v2/certifier/certifier_service/certprotos"
        certlib "github.com/jlmucb/crypto/v2/certifier/certifier_service/certlib"
)

var simpleServerPath = flag.String("path", "./SimpleServerFiles",
        "path to Server files")
var serverHost = flag.String("host", "localhost", "address for client/server")
var serverPort = flag.String("port", "8123", "port for client/server")

var policyKeyFile = flag.String("policy_key_file", "policy_key_file.bin", "key file name")
var policyCertFile = flag.String("policy_cert_file", "policy_cert_file.bin", "cert file name")

var readPolicy = flag.Bool("readPolicy", false, "read policy")

// If generatePolicy is true, we generate policy programatically
// Generated policy is really for test only and we should remove it.
// If we do need to generate policy, simpleclient plays a role and the
// following flags are needed.
var simpleClientFlag = flag.Bool("simpleclient", false, "running with simpleclient")
var measurementFile = flag.String("measurement_file", "./certlib/measurement_file.bin", "measurement file name")
var platformFile = flag.String("platform_file", "./certlib/platform_file.bin", "platform file name")

// If generatePolicy is false, we will read in policy from the following file
var policyInitialized bool = false
var signedPolicyStatements *certprotos.SignedClaimSequence = nil
var policyFile = flag.String("policyFile", "./certlib/policy.bin", "policy file name")

var privatePolicyKey certprotos.KeyMessage
var publicPolicyKey *certprotos.KeyMessage = nil
var serializedPolicyCert []byte
var policyCert *x509.Certificate = nil
var sn uint64 = uint64(time.Now().UnixNano())
var duration float64 = 365.0 * 86400
var measurements certprotos.SignedClaimSequence
var platforms certprotos.SignedClaimSequence

func initMeasurements(mf *string) bool {
        if mf == nil {
                return true
        }

        serializedMeasurements, err := os.ReadFile(*mf)
        if err != nil {
                fmt.Println("can't read measurement file, ", err)
                return false
        }
        err = proto.Unmarshal(serializedMeasurements, &measurements)
        if err != nil {
                fmt.Println("can't unmarshal measurements, ", err)
                return false
        }
        return true
}

func initPlatforms(pf *string) bool {
        if pf == nil {
                return true
        }

        serializedPlatforms, err := os.ReadFile(*pf)
        if err != nil {
                fmt.Println("can't read platforms file, ", err)
                return false
        }
        err = proto.Unmarshal(serializedPlatforms, &platforms)
        if err != nil {
                fmt.Println("can't unmarshal platforms, ", err)
                return false
        }
        return true
}

func FindPolicyKeySaysMeasurementIsTrusted(policyKeySaysMeasurementIsTrusted *certprotos.VseClause)  *certprotos.SignedClaimMessage {
        for i := 0; i < len(measurements.Claims); i++ {
                vse := certlib.GetVseFromSignedClaim(measurements.Claims[i])
                if vse == nil {
                        fmt.Printf("Cant GetVseFromSignedClaim in measurement\n")
                        continue
                }
                if certlib.SameVseClause(vse, policyKeySaysMeasurementIsTrusted) {
                        return measurements.Claims[i]
                }
        }
        return nil
}

func FindPolicyKeySaysPlatformKeyIsTrusted(policyKeySaysPlatformKeyIsTrusted *certprotos.VseClause)  *certprotos.SignedClaimMessage {
        for i := 0; i < len(platforms.Claims); i++ {
                vse := certlib.GetVseFromSignedClaim(platforms.Claims[i])
                if vse == nil {
                        fmt.Printf("Cant GetVseFromSignedClaim in platforms\n")
                        continue
                }
                if certlib.SameVseClause(vse, policyKeySaysPlatformKeyIsTrusted) {
                        return platforms.Claims[i]
                }
        }
        return nil
}

// At init, we retrieve the policy key and the rules (perhaps a database) to evaluate
func initCertifierService() bool {
        // DEBUG
        fmt.Printf("initCertifierService, Policy key file: %s, Policy cert file: %s\n", *policyKeyFile, *policyCertFile)

        serializedKey, err := os.ReadFile(*policyKeyFile)
        if err != nil {
                fmt.Println("can't read key file, ", err)
                return false
        }

        serializedPolicyCert, err := os.ReadFile(*policyCertFile)
        if err != nil {
                fmt.Println("can't certkey file, ", err)
        }
        policyCert, err = x509.ParseCertificate(serializedPolicyCert)
        if err != nil {
                fmt.Println("Can't Parse policy cert, ", err)
                return false
        }

        err = proto.Unmarshal(serializedKey, &privatePolicyKey)
        if err != nil {
                return false
        }

        publicPolicyKey = certlib.InternalPublicFromPrivateKey(&privatePolicyKey)
        if publicPolicyKey == nil {
                return false
        }

        if *readPolicy {

                // Debug
                fmt.Printf("Reading policy\n")

                policySeq, err := os.ReadFile(*policyFile)
                if err != nil {
                        fmt.Println("can't read policy file, ", err)
                        return false
                }

                // Debug
                fmt.Printf("Read %d bytes\n", len(policySeq))

                var  claimBlocks *certprotos.BufferSequence = &certprotos.BufferSequence{}
                err = proto.Unmarshal(policySeq, claimBlocks)
                if err != nil {
                        fmt.Println("can't parse policy file, ", err)
                        return false
                }

                // Debug
                fmt.Printf("%d policy statements\n", len (claimBlocks.Block))

                signedPolicyStatements = &certprotos.SignedClaimSequence {}
                for i := 0; i < len(claimBlocks.Block); i++ {
                        var sc *certprotos.SignedClaimMessage =  &certprotos.SignedClaimMessage{}
                        err = proto.Unmarshal(claimBlocks.Block[i], sc)
                        if err != nil {
                                fmt.Println("can't recover policy rule, ", err)
                                return false
                        }
                        signedPolicyStatements.Claims = append(signedPolicyStatements.Claims, sc)
                }
                policyInitialized = true

                // Simple policy will be
                //      policy-key says the platform-key is-trusted-for-attestation
                //      policy-key says example_app-measurement is-trusted
                // The following come in the request
                //      policy-key says platform-key is-trusted-for-attestation
                //      platform-key says attestation-key is-trusted-for-attestation
                //      attestation-key says enclave-key speaks-for measurement


        } else {

                if !initMeasurements(measurementFile) {
                        return false
                }
                if !initPlatforms(platformFile) {
                        return false
                }
        }


        if !certlib.InitSimulatedEnclave() {
                return false
        }
        return true
}

func AddFactFromSignedClaim(signedClaim *certprotos.SignedClaimMessage, alreadyProved *certprotos.ProvedStatements) bool {

        k := signedClaim.SigningKey
        tcl := certprotos.VseClause{}
        if certlib.VerifySignedAssertion(*signedClaim, k, &tcl) {
                // make sure the saying key in tcl is the same key that signed it
                if tcl.GetVerb() == "says" && tcl.GetSubject().GetEntityType() == "key" {
                        if certlib.SameKey(k, tcl.GetSubject().GetKey()) {
                                alreadyProved.Proved = append(alreadyProved.Proved, &tcl)
                        } else {
                                return false
                        }
                }
        } else {
                return false
        }
        return true
}

func AddNewFactsForOePlatformAttestation(publicPolicyKey *certprotos.KeyMessage, alreadyProved *certprotos.ProvedStatements) bool {
        return false
}

func AddNewFactsForAbbreviatedPlatformAttestation(publicPolicyKey *certprotos.KeyMessage,
        alreadyProved *certprotos.ProvedStatements) bool {

        // At this point, already proved should contain
        //      "policyKey is-trusted"
        //      "platformKey says attestationKey is-trusted-for-attestation
        //      "attestKey says enclaveKey speaks-for measurement"
        // Add
        //      "policyKey says measurement is-trusted"
        //      "policyKey says platformKey is-trusted-for-attestation"
        // Get platform measurement statement and platform statement
        // Find the corresponding "measurement is-trusted" in measurements
        //      This is signedPolicyKeySaysMeasurementIsTrusted
        //      Add it
        // Find the corresponding "platformKey is-trusted" in platforms 
        //      This is signedPolicyKeySaysPlatformKeyIsTrusted
        //      Add it

        if len(alreadyProved.Proved) != 3 {
                fmt.Printf("AddNewFactsForAbbreviatedPlatformAttestation, Error 1\n")
                return false
        }

        var signedPolicyKeySaysMeasurementIsTrusted *certprotos.SignedClaimMessage = nil
        var signedPolicyKeySaysPlatformKeyIsTrusted *certprotos.SignedClaimMessage = nil

        if *readPolicy {
                if  !policyInitialized {
                        fmt.Printf("Policy not initialized, error\n")
                        return false
                }
                signedPolicyKeySaysMeasurementIsTrusted = signedPolicyStatements.Claims[0]
                signedPolicyKeySaysPlatformKeyIsTrusted = signedPolicyStatements.Claims[1]

                // Debug
                fmt.Printf("\nPolicy:\n")
                certlib.PrintSignedClaim(signedPolicyKeySaysMeasurementIsTrusted)
                fmt.Printf("\n")
                certlib.PrintSignedClaim(signedPolicyKeySaysPlatformKeyIsTrusted)
                fmt.Printf("\n")
        } else {

                // Extract platformKey from evidence 1: "platformKey says attestationKey is-trusted"
                if  alreadyProved.Proved[1].Clause == nil  || alreadyProved.Proved[1].Clause.Subject == nil {
                        fmt.Printf("Expected platformKey says attestationKey is-trusted, error\n")
                        return false
                }
                platformEntity := alreadyProved.Proved[1].Subject

                // Extract measurement from evidence 2: "attestKey says enclaveKey speaks-for measurement"
                if  alreadyProved.Proved[2].Clause == nil  || alreadyProved.Proved[2].Clause.Object == nil {
                        fmt.Printf("Expected attestKey says enclaveKey speaks-for measurement, error\n")
                        return false
                }
                measurementEntity := alreadyProved.Proved[2].Clause.Object

                isTrusted := "is-trusted"
                isTrustedForAtt := "is-trusted-for-attestation"
                says := "says"
                policyEntity := certlib.MakeKeyEntity(publicPolicyKey)
                measurementIsTrusted := certlib.MakeUnaryVseClause(measurementEntity, &isTrusted)
                platformKeyIsTrusted := certlib.MakeUnaryVseClause(platformEntity, &isTrustedForAtt)
                policyKeySaysMeasurementIsTrusted := certlib.MakeIndirectVseClause(policyEntity, &says, measurementIsTrusted)
                policyKeySaysPlatformKeyIsTrusted := certlib.MakeIndirectVseClause(policyEntity, &says, platformKeyIsTrusted)

                signedPolicyKeySaysMeasurementIsTrusted := FindPolicyKeySaysMeasurementIsTrusted(policyKeySaysMeasurementIsTrusted)
                if signedPolicyKeySaysMeasurementIsTrusted == nil {
                        fmt.Printf("Can't find matching measurement policy\n")
                        return false
                }
                signedPolicyKeySaysPlatformKeyIsTrusted := FindPolicyKeySaysPlatformKeyIsTrusted(policyKeySaysPlatformKeyIsTrusted)
                if signedPolicyKeySaysPlatformKeyIsTrusted == nil {
                        fmt.Printf("Can't find matching platform policy\n")
                        return false
                }
        }

        if !AddFactFromSignedClaim(signedPolicyKeySaysMeasurementIsTrusted, alreadyProved) {
                fmt.Printf("Couldn't AddFactFromSignedClaim, Error 1\n")
                return false
        }

        if !AddFactFromSignedClaim(signedPolicyKeySaysPlatformKeyIsTrusted, alreadyProved) {
                fmt.Printf("Couldn't AddFactFromSignedClaim, Error 2\n")
                return false
        }
        return true
}

// Returns toProve and proof steps
func ConstructProofFromOeEvidence(publicPolicyKey *certprotos.KeyMessage, alreadyProved certprotos.ProvedStatements) (*certprotos.VseClause, *certprotos.Proof) {

        // At this point, the evidence should be
        //      "policyKey is-trusted"
        //      "policyKey says platformKey is-trusted"
        //      "enclaveKey speaks-for measurement
        //      "policyKey says measurement is-trusted"

        var toProve *certprotos.VseClause = nil
        proof := &certprotos.Proof{}

        return toProve, proof
}

// Returns toProve and proof steps
func ConstructProofFromFullVseEvidence(publicPolicyKey *certprotos.KeyMessage, alreadyProved certprotos.ProvedStatements) (*certprotos.VseClause, *certprotos.Proof) {

        // At this point, the evidence should be
        //      "policyKey is-trusted"
        //      "platformKey says attestationKey is-trusted-for-attestation"
        //      "attestKey says enclaveKey speaks-for measurement
        //      "policyKey says measurement is-trusted"
        //      "policyKey says platformKey is-trusted-for-attestation"

        // Debug
        fmt.Printf("ConstructProofFromFullVseEvidence entries %d\n", len(alreadyProved.Proved))

        proof := &certprotos.Proof{}
        r1 := int32(1)
        r3 := int32(3)
        r5 := int32(5)
        r6 := int32(6)

        policyKeyIsTrusted := alreadyProved.Proved[0]
        policyKeySaysMeasurementIsTrusted := alreadyProved.Proved[3]
        measurementIsTrusted := policyKeySaysMeasurementIsTrusted.Clause
        ps1 := certprotos.ProofStep {
                S1: policyKeyIsTrusted,
                S2: policyKeySaysMeasurementIsTrusted,
                Conclusion: measurementIsTrusted,
                RuleApplied: &r3,
        }
        proof.Steps = append(proof.Steps, &ps1)

        policyKeySaysPlatformKeyIsTrusted := alreadyProved.Proved[4]
        platformKeyIsTrusted := policyKeySaysPlatformKeyIsTrusted.Clause
        ps2 := certprotos.ProofStep {
                S1: policyKeyIsTrusted,
                S2: policyKeySaysPlatformKeyIsTrusted,
                Conclusion: platformKeyIsTrusted,
                RuleApplied: &r5,
        }
        proof.Steps = append(proof.Steps, &ps2)

        platformKeySaysAttestKeyIsTrusted := alreadyProved.Proved[1]
        attestKeyIsTrusted := platformKeySaysAttestKeyIsTrusted.Clause
        ps3 := certprotos.ProofStep {
                S1: platformKeyIsTrusted,
                S2: platformKeySaysAttestKeyIsTrusted,
                Conclusion: attestKeyIsTrusted,
                RuleApplied: &r5,
        }
        proof.Steps = append(proof.Steps, &ps3)

        attestKeySaysEnclaveKeySpeaksForMeasurement := alreadyProved.Proved[2]
        enclaveKeySpeaksForMeasurement := attestKeySaysEnclaveKeySpeaksForMeasurement.Clause
        ps4 := certprotos.ProofStep {
        S1: attestKeyIsTrusted,
        S2: attestKeySaysEnclaveKeySpeaksForMeasurement,
        Conclusion: enclaveKeySpeaksForMeasurement,
        RuleApplied: &r6,
        }
        proof.Steps = append(proof.Steps, &ps4)

        isTrustedForAuth := "is-trusted-for-authentication"
        toProve :=  certlib.MakeUnaryVseClause(enclaveKeySpeaksForMeasurement.Subject, &isTrustedForAuth)
        ps5 := certprotos.ProofStep {
        S1: measurementIsTrusted,
        S2: enclaveKeySpeaksForMeasurement,
        Conclusion: toProve,
        RuleApplied: &r1,
        }
        proof.Steps = append(proof.Steps, &ps5)

        return toProve, proof
}

//      ConstructProofFromRequest first checks evidence and make sure each evidence
//              component is verified and it put in alreadyProved Statements
//      Next, alreadyProved is augmented to include additional true statements
//              required for the proof
//      Finally a proof is constructed
//
//      Returns the proof goal (toProve), the proof steps (proof), 
//              and a list of true statements (alreadyProved)
func ConstructProofFromRequest(evidenceType string, support *certprotos.EvidencePackage) (*certprotos.VseClause,
                *certprotos.Proof, *certprotos.ProvedStatements) {

        fmt.Printf("\nConstructProofFromRequest\n")
        fmt.Printf("Submitted evidence type: %s\n", evidenceType)

        if support == nil {
                fmt.Printf("Empty support\n")
                return nil, nil, nil
        }

        if support.ProverType == nil {
                fmt.Printf("No prover type\n")
                return nil, nil, nil
        }

        if support.GetProverType() != "vse-verifier" {
                fmt.Printf("Only vse verifier supported\n")
                return nil, nil, nil
        }

        alreadyProved := &certprotos.ProvedStatements{}
        var toProve *certprotos.VseClause = nil
        var proof *certprotos.Proof = nil

        // Debug
        fmt.Printf("%d fact assertions in evidence\n", len(support.FactAssertion))

        if !certlib.InitProvedStatements(*publicPolicyKey, support.FactAssertion, alreadyProved) {
                fmt.Printf("certlib.InitProvedStatements failed\n")
                return nil, nil, nil
        }

        // Debug
        fmt.Printf("\nInitial proved statements %d\n", len(alreadyProved.Proved))
        for i := 0; i < len(alreadyProved.Proved); i++ {
                certlib.PrintVseClause(alreadyProved.Proved[i])
                fmt.Println("")
        }
        fmt.Println("")

        // evidenceType should be "full-vse-support", "platform-attestation-only" or
        //      "oe-evidence"
        if evidenceType == "full-vse-support" {
        } else if evidenceType == "platform-attestation-only" {
                if !AddNewFactsForAbbreviatedPlatformAttestation(publicPolicyKey, alreadyProved) {
                        fmt.Printf("AddNewFactsForAbbreviatedPlatformAttestation failed\n")
                        return nil, nil, nil
                }
        } else if evidenceType == "oe-evidence" {
                if !AddNewFactsForOePlatformAttestation(publicPolicyKey, alreadyProved) {
                        fmt.Printf("AddNewFactsForOePlatformAttestation failed\n")
                        return nil, nil, nil
                }
        } else {
                fmt.Printf("Invalid Evidence type: %s\n", evidenceType)
                return nil, nil, nil
        }

        // Debug
        fmt.Printf("Augmented proved statements %d\n", len(alreadyProved.Proved))
        for i := 0; i < len(alreadyProved.Proved); i++ {
                certlib.PrintVseClause(alreadyProved.Proved[i])
                fmt.Println("")
        }

        if evidenceType == "full-vse-support" || evidenceType == "platform-attestation-only" {
                toProve, proof = ConstructProofFromFullVseEvidence(publicPolicyKey, *alreadyProved)
                if toProve == nil {
                        fmt.Printf("ConstructProofFromFullVseEvidence failed\n")
                        return nil, nil, nil
                }
        } else if evidenceType == "oe-evidence" {
                toProve, proof = ConstructProofFromOeEvidence(publicPolicyKey, *alreadyProved)
                if toProve == nil {
                        fmt.Printf("ConstructProofFromOeEvidence failed\n")
                        return nil, nil, nil
                }
        } else {
                return nil, nil, nil
        }

        // DEBUG
        if toProve != nil {
                fmt.Printf("To prove: ")
                certlib.PrintVseClause(toProve)
        }
        fmt.Printf("\n\nProof:\n")
        for i := 0; i < len(proof.Steps); i++ {
                certlib.PrintProofStep("    ", proof.Steps[i])
        }
        fmt.Println()
        fmt.Println()

        return toProve, proof, alreadyProved
}

func getAppMeasurementFromProvedStatements(appKeyEntity *certprotos.EntityMessage,
                alreadyProved *certprotos.ProvedStatements) []byte {
        for i := 0; i < len(alreadyProved.Proved); i++ {
                if certlib.SameEntity(alreadyProved.Proved[i].GetSubject(), appKeyEntity) {
                        if alreadyProved.Proved[i].GetVerb() == "speaks-for" {
                                if alreadyProved.Proved[i].Object != nil && alreadyProved.Proved[i].Object.GetEntityType() == "measurement" {
                                        return alreadyProved.Proved[i].Object.Measurement
                                }
                        }
                }
        }
        return nil
}

// This will become:
//      read a message
//      evaluate the trust assertion
//      if it succeeds,
//              sign a cert
//              save the proof, action and cert info in the transaction files
//              save net infor for forensics
//      if it fails
//              log the failure 
//              save net infor for forensics
func serviceThread(conn net.Conn, client string) {

        b := make([]byte, 8192)
        n, err := conn.Read(b)
        if err != nil {
                fmt.Printf("n: %d\n", n)
        }

        request:= &certprotos.TrustRequestMessage{}
        err = proto.Unmarshal(b[0:n], request)
        if err != nil {
                fmt.Println("serviceThread: Failed to decode request", err)
        }

        // DEBUG
        fmt.Printf("serviceThread: Trust request received:\n")
        certlib.PrintTrustRequest(request)

        // Construct the proof
        toProve, proof, alreadyProved := ConstructProofFromRequest(request.GetSubmittedEvidenceType(), request.GetSupport())
        if toProve == nil || proof == nil || alreadyProved == nil {
                // Debug
                fmt.Printf("Constructing Proof fails\n")
                return
        } else {
                // Debug
                fmt.Printf("Constructing Proof succeeded\n")
        }

        // Debug
        if toProve == nil {
                fmt.Printf("To prove is nil\n")
        } else {
                fmt.Printf("To prove: ")
                certlib.PrintVseClause(toProve)
                fmt.Printf("\n")
        }

        // Response
        succeeded := "succeeded"
        failed := "failed"

        response := certprotos.TrustResponseMessage{}
        response.RequestingEnclaveTag = request.RequestingEnclaveTag
        response.ProvidingEnclaveTag = request.ProvidingEnclaveTag
        response.Artifact = make([]byte, 5)
        response.Status = &failed

        // Make sure app key signed policy key
        // Replace the following with the serialized measurement of the requesting app
        appKeyEntity := toProve.GetSubject()
        var appKey *certprotos.KeyMessage = nil
        if appKeyEntity.GetEntityType() == "key" {
                appKey = appKeyEntity.Key
        }

        if !*simpleClientFlag {
                policyKeyVerified := false
                pK := rsa.PrivateKey{}
                PK := rsa.PublicKey{}
                if appKey != nil && certlib.GetRsaKeysFromInternal(appKey, &pK, &PK){
                        assertedPolicyKey := certprotos.KeyMessage {}
                        if certlib.RsaSha256Verify(&PK, request.GetSerializedPolicyKey(), request.GetSignedPolicyKey()) {
                                err = proto.Unmarshal(request.GetSerializedPolicyKey(), &assertedPolicyKey)
                                if err == nil && certlib.SameKey(publicPolicyKey, &assertedPolicyKey) {
                                        policyKeyVerified = true
                                }
                        }
                } else {
                        fmt.Printf("Can't get app key to check signature\n")
                }

                if !policyKeyVerified {
                        // send response
                        rb, err := proto.Marshal(&response)
                        if err != nil {
                                return
                        }
                        _, err = conn.Write(rb)
                }
        }

        // find statement appKey speaks-for measurement in alreadyProved later
        appOrgName := *toProve.Subject.Key.KeyName

        // Debug
        fmt.Printf("Verifying proof %d steps\n", len(proof.Steps))

        // Check proof
        if proof == nil {
                response.Status = &failed
        } else if certlib.VerifyProof(publicPolicyKey, toProve, proof, alreadyProved) {
                fmt.Printf("Proof verified\n")
                // Produce Artifact
                if toProve.Subject == nil && toProve.Subject.Key == nil  && toProve.Subject.Key.KeyName == nil {
                        fmt.Printf("toProve check failed\n")
                        certlib.PrintVseClause(toProve)
                        fmt.Println()
                        response.Status = &failed
                } else {
                        // find statement appKey speaks-for measurement in alreadyProved and reset appOrgName
                        m := getAppMeasurementFromProvedStatements(appKeyEntity,  alreadyProved)
                        if m != nil {
                                appOrgName = "Measured-" + hex.EncodeToString(m)
                        }
                        sn = sn + 1
                        cert := certlib.ProduceArtifact(&privatePolicyKey, policyCert, toProve.Subject.Key,
                                request.GetServiceAddress(), appOrgName, sn, duration)
                        if cert == nil {
                                fmt.Printf("certlib.ProduceArtifact returned nil\n")
                                response.Status = &failed
                        }
                        response.Status = &succeeded
                        response.Artifact = cert.Raw
                }
        } else {
                fmt.Printf("Verifying proof failed\n")
                response.Status = &failed
        }

        // Debug
        fmt.Printf("Sending response\n")
        certlib.PrintTrustReponse(&response)

        // send response
        rb, err := proto.Marshal(&response)
        if err != nil {
                return
        }
        _, err = conn.Write(rb)
        return
}


func server(serverAddr string, arg string) {

        if initCertifierService() != true {
                fmt.Println("Server: failed to initialize server")
                os.Exit(1)
        }

        var sock net.Listener
        var err error
        var conn net.Conn

        // Listen for clients.
        fmt.Printf("simpleserver: Listening\n")
        sock, err = net.Listen("tcp", serverAddr)
        if err != nil {
                fmt.Printf("simpleserver, listen error: ", err, "\n")
                return
        }

        // Service client connections.
        for {
                fmt.Printf("server: at accept\n")
                conn, err = sock.Accept()
                if err != nil {
                        fmt.Printf("simpleserver: can't accept connection: %s\n", err.Error())
                        continue
                }
                var clientName string = "blah"
                go serviceThread(conn, clientName)
        }
}

func main() {

        flag.Parse()

        var serverAddr string
        serverAddr = *serverHost + ":" + *serverPort
        var arg string = "something"

        // later this may turn into a TLS connection, we'll see
        server(serverAddr, arg)
        fmt.Printf("simpleserver: done\n")
}
