#
# Helpful script to run example
#

export GOPATH=$HOME
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
export GO111MODULE=off
export CERTIFIER_PROTOTYPE=~/src/github.com/jlmucb/crypto/v2/certifier-framework-for-confidential-computing
export SEV_EXAMPLE_DIR=$CERTIFIER_PROTOTYPE/sample_apps/simple_app_under_sev

# Create keys
mkdir -p $SEV_EXAMPLE_DIR/provisioning
cd $SEV_EXAMPLE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/cert_utility.exe --operation=generate-policy-key \
    --policy_key_output_file=policy_key_file.bin --policy_cert_output_file=policy_cert_file.bin

# embed policy key and compile app
cd $SEV_EXAMPLE_DIR/provisioning
$CERTIFIER_PROTOTYPE/utilities/embed_policy_key.exe --input=policy_cert_file.bin --output=../policy_key.cc

# make app and compute app measurement
cd $SEV_EXAMPLE_DIR
make -f sev_example_app.mak

# build policy
cd $SEV_EXAMPLE_DIR/provisioning

$CERTIFIER_PROTOTYPE/utilities/measurement_init.exe --mrenclave=5c19d5b4a50066c8c991bd920dfa2276e11d3531c91434a734f3b258ab279cd1b3bbe89ef930236af11dc3d28c70f406 --out_file=sev_example_app.measurement

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --key_subject="" \
  --measurement_subject=sev_example_app.measurement --verb="is-trusted" \
  --output=ts1.bin
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
  --verb="says" --clause=ts1.bin --output=vse_policy1.bin

$CERTIFIER_PROTOTYPE/utilities/make_unary_vse_clause.exe --cert_subject=ark_cert.der \
  --verb="is-trusted-for-attestation" --output=ts2.bin
$CERTIFIER_PROTOTYPE/utilities/make_indirect_vse_clause.exe --key_subject=policy_key_file.bin \
  --verb="says" --clause=ts2.bin --output=vse_policy2.bin

$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe \
  --vse_file=vse_policy1.bin --duration=9000 \
  --private_key_file=policy_key_file.bin --output=signed_claim_1.bin
$CERTIFIER_PROTOTYPE/utilities/make_signed_claim_from_vse_clause.exe --vse_file=vse_policy2.bin \
  --duration=9000 --private_key_file=policy_key_file.bin --output=signed_claim_2.bin

$CERTIFIER_PROTOTYPE/utilities/package_claims.exe --input=signed_claim_1.bin,signed_claim_2.bin\
  --output=policy.bin

$CERTIFIER_PROTOTYPE/utilities/print_packaged_claims.exe --input=policy.bin


# provision service and apps
cd $SEV_EXAMPLE_DIR
mkdir -p app1_data app2_data
mkdir -p service

# provision service and apps
cd $SEV_EXAMPLE_DIR/provisioning

cp ./* $SEV_EXAMPLE_DIR/service
cp ./* $SEV_EXAMPLE_DIR/app1_data
cp ./* $SEV_EXAMPLE_DIR/app2_data

#compile the server
cd $CERTIFIER_PROTOTYPE/certifier_service
go build simpleserver.go

#run server
cd $SEV_EXAMPLE_DIR/service
$CERTIFIER_PROTOTYPE/certifier_service/simpleserver \
      --path=$SEV_EXAMPLE_DIR/service \
      --policyFile=policy.bin --readPolicy=true

# initialize client app
cd $SEV_EXAMPLE_DIR
$SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=cold-init --data_dir=./app1_data/ --policy_store_file=policy_store
# get client app certified
$SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=get-certifier --data_dir=./app1_data/ --policy_store_file=policy_store

# initialize server app
$SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=cold-init --data_dir=./app2_data/ --policy_store_file=policy_store
# get server app certified
$SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true \
      --operation=get-certifier --data_dir=./app2_data/ --policy_store_file=policy_store

#run the app
cd $SEV_EXAMPLE_DIR
$SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true --operation=run-app-as-server --data_dir=./app2_data/ \
      --policy_store_file=policy_store
cd $SEV_EXAMPLE_DIR
$SEV_EXAMPLE_DIR/sev_example_app.exe --print_all=true --operation=run-app-as-client --data_dir=./app1_data/ \
      --policy_store_file=policy_store

